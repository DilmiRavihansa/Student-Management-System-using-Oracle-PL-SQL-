Student Table SQL Procedures


1 Insert a new student
  
 CREATE OR REPLACE PROCEDURE insert_student(
p_first_name IN VARCHAR2,
p_last_name IN VARCHAR2,
p_date_of_birth IN DATE,
p_email IN VARCHAR2,
p_class_id IN NUMBER
) AS
BEGIN
INSERT INTO Student (first_name, last_name, date_of_birth, email, class_id)
VALUES (p_first_name, p_last_name, p_date_of_birth, p_email, p_class_id);

COMMIT;
DBMS_OUTPUT.PUT_LINE('Student inserted successfully.');
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/



BEGIN
insert_student('Liam', 'Taylor', TO_DATE('2007-02-28', 'YYYY-MM-DD'), 'liam.taylor@example.com', 1);
END;
/






2 Update email of the student


 CREATE OR REPLACE PROCEDURE update_student_email(
p_student_id IN NUMBER,
p_new_email IN VARCHAR2
) AS
BEGIN
UPDATE Student
SET email = p_new_email
WHERE student_id = p_student_id;

IF SQL%ROWCOUNT > 0 THEN
COMMIT;
DBMS_OUTPUT.PUT_LINE('Email updated successfully.');
ELSE
DBMS_OUTPUT.PUT_LINE('No student found with the given ID.');
END IF;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

BEGIN
update_student_email(1, 'new.updatedemail@example.com');
END;
/






3 Delete a Student




CREATE OR REPLACE PROCEDURE delete_student(
p_student_id IN NUMBER
) AS
BEGIN
DELETE FROM Student
WHERE student_id = p_student_id;

IF SQL%ROWCOUNT > 0 THEN
COMMIT;
DBMS_OUTPUT.PUT_LINE('Student deleted successfully.');
ELSE
DBMS_OUTPUT.PUT_LINE('No student found with the given ID.');
END IF;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


BEGIN
delete_student(4);
END;
/






4 Select a student based on their ID



CREATE OR REPLACE FUNCTION get_student_details(
p_student_id IN NUMBER
) RETURN VARCHAR2 AS
v_student_details VARCHAR2(4000);
BEGIN
SELECT 'Student Name: ' || first_name || ' ' || last_name || ', Email: ' || email || ', Class ID: ' || class_id
INTO v_student_details
FROM Student
WHERE student_id = p_student_id;

RETURN v_student_details;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'No student found with the given ID.';
WHEN OTHERS THEN
RETURN 'Error: ' || SQLERRM;
END;
/

DECLARE
v_details VARCHAR2(4000);
BEGIN
v_details := get_student_details(1);
DBMS_OUTPUT.PUT_LINE(v_details);
END;
/







Class Table




1 Insert a new class




  CREATE OR REPLACE PROCEDURE insert_class(
p_class_id IN Class.class_id%TYPE,
p_class_name IN Class.class_name%TYPE,
p_teacher_id IN Class.teacher_id%TYPE
)
IS
BEGIN
INSERT INTO Class (class_id, class_name, teacher_id)
VALUES (p_class_id, p_class_name, p_teacher_id);

DBMS_OUTPUT.PUT_LINE('Class inserted successfully.');
END;
/



EXEC insert_class(5, 'Science', 2);







2 Update the class name
  
   CREATE OR REPLACE PROCEDURE update_class(
p_class_id IN Class.class_id%TYPE,
p_class_name IN Class.class_name%TYPE
)
IS
BEGIN
UPDATE Class
SET class_name = p_class_name
WHERE class_id = p_class_id;

DBMS_OUTPUT.PUT_LINE('Class updated successfully.');
END;
/



EXEC update_class(1, 'Advanced Math');



3 Delete a class 


  CREATE OR REPLACE PROCEDURE delete_class(
p_class_id IN Class.class_id%TYPE
)
IS
BEGIN
DELETE FROM Class
WHERE class_id = p_class_id;

DBMS_OUTPUT.PUT_LINE('Class deleted successfully.');
END;
/



EXEC delete_class(5);



4 Select a class using class ID




  CREATE OR REPLACE PROCEDURE select_class_by_id(
p_class_id IN Class.class_id%TYPE
)
IS
v_class_name Class.class_name%TYPE;
v_teacher_id Class.teacher_id%TYPE;
BEGIN
SELECT class_name, teacher_id
INTO v_class_name, v_teacher_id
FROM Class
WHERE class_id = p_class_id;

DBMS_OUTPUT.PUT_LINE('Class ID: ' || p_class_id || ', Class Name: ' || v_class_name || ', Teacher ID: ' || v_teacher_id);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No class found with ID: ' || p_class_id);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/





BEGIN
select_class_by_id(1);
END;
/





Teacher Table




1 Insert a new teacher 


CREATE OR REPLACE PROCEDURE insert_teacher(
p_teacher_id IN Teacher.teacher_id%TYPE,
p_first_name IN Teacher.first_name%TYPE,
p_last_name IN Teacher.last_name%TYPE,
p_email IN Teacher.email%TYPE,
p_phone_number IN Teacher.phone_number%TYPE
)
IS
BEGIN
INSERT INTO Teacher (teacher_id, first_name, last_name, email, phone_number)
VALUES (p_teacher_id, p_first_name, p_last_name, p_email, p_phone_number);

DBMS_OUTPUT.PUT_LINE('Teacher inserted successfully.');
END;
/

EXEC insert_teacher(15, 'John', 'Smith', 'teache321@gmail.com,', '9876543210');







2 Update a teacher (email and phone number)





  CREATE OR REPLACE PROCEDURE update_teacher(
p_teacher_id IN Teacher.teacher_id%TYPE,
p_phone_number IN Teacher.phone_number%TYPE,
p_email IN Teacher.email%TYPE
)
IS
BEGIN
-- Update phone_number and email fields
UPDATE Teacher
SET phone_number = p_phone_number,
email = p_email
WHERE teacher_id = p_teacher_id;

IF SQL%ROWCOUNT > 0 THEN
DBMS_OUTPUT.PUT_LINE('Teacher updated successfully.');
ELSE
DBMS_OUTPUT.PUT_LINE('No teacher found with the given ID.');
END IF;

EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/





BEGIN
update_teacher(1, '9876543210', 'teacher@example.com');
END;
/







3 Delete a Teacher


 CREATE OR REPLACE PROCEDURE delete_teacher(
p_teacher_id IN Teacher.teacher_id%TYPE
)
IS
BEGIN
DELETE FROM Teacher
WHERE teacher_id = p_teacher_id;

DBMS_OUTPUT.PUT_LINE('Teacher deleted successfully.');
END;
/



EXEC delete_teacher(5);







4 Select a teacher using ID




CREATE OR REPLACE PROCEDURE select_teacher_by_id(
p_teacher_id IN Teacher.teacher_id%TYPE
)
IS
v_first_name Teacher.first_name%TYPE;
v_last_name Teacher.last_name%TYPE;
v_email Teacher.email%TYPE;
v_phone_number Teacher.phone_number%TYPE;
BEGIN
SELECT first_name, last_name, email, phone_number
INTO v_first_name, v_last_name, v_email, v_phone_number
FROM Teacher
WHERE teacher_id = p_teacher_id;

DBMS_OUTPUT.PUT_LINE('Teacher ID: ' || p_teacher_id || ', Name: ' || v_first_name || ' ' || v_last_name || ', Email ' || v_email || ', Phone: ' || v_phone_number);

EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No teacher found with ID: ' || p_teacher_id);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/





BEGIN
select_teacher_by_id(2); -- Pass the teacher_id you want to query
END;
/

   